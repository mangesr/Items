{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ShowsComponent = class ShowsComponent {\n  constructor(newServis) {\n    this.newServis = newServis;\n    this.isSameUser = true;\n    this.editUser = {\n      id: -1,\n      name: '',\n      phone: '',\n      email: ''\n    };\n  }\n  ngOnInit() {}\n  edit(user, i) {\n    this.editUser = {\n      id: user.id,\n      name: user.name,\n      phone: user.phone,\n      email: user.email\n    };\n    if (this.editUser.id === user.id) {\n      this.isSameUser = true;\n    }\n    this.isSameUser = false;\n    this.newServis.users[i].editMode = true;\n  }\n  save(user, i) {\n    if (!this.isValidEmail(user.email)) {\n      alert(\"Email is not valid\");\n      return;\n    }\n    if (!this.isValidPhone(user.phone)) {\n      alert(\"Phone is not valid\");\n      return;\n    }\n    if (user.name.trim() === '') {\n      alert(\"Name is required\");\n      return;\n    }\n    const indexExist = this.newServis.users.findIndex(x => x.id === user.id);\n    if (indexExist !== -1) {\n      this.newServis.users[indexExist] = this.editUser;\n      user.editMode = false;\n      this.isSameUser = true;\n    }\n  }\n  cancel(user) {\n    user.editMode = false;\n    this.isSameUser = true;\n  }\n  delete(u, i) {\n    if (u.id === this.editUser.id) {\n      if (this.newServis.users[i] === u) {\n        this.newServis.users.splice(i, 1);\n        this.isSameUser = true;\n      }\n    }\n    console.log(i, this.newServis.users);\n  }\n  isValidEmail(email) {\n    // Use a regular expression or other method to validate email\n    // For example, you can use Angular's built-in email validator\n    if (/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/.test(email)) {\n      return true;\n    }\n    return false;\n  }\n  isValidPhone(phone) {\n    // Validate phone number using a regular expression or other method\n    // For example, you can use a pattern like /[0-9]{10}/ to validate a 10-digit phone number\n    if (/[0-9]{10}/.test(phone)) {\n      return true;\n    }\n    return false;\n  }\n};\nShowsComponent = __decorate([Component({\n  selector: 'app-shows',\n  templateUrl: './shows.component.html',\n  styleUrls: ['./shows.component.css']\n})], ShowsComponent);","map":{"version":3,"names":["Component","ShowsComponent","constructor","newServis","isSameUser","editUser","id","name","phone","email","ngOnInit","edit","user","i","users","editMode","save","isValidEmail","alert","isValidPhone","trim","indexExist","findIndex","x","cancel","delete","u","splice","console","log","test","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\mangesr\\Desktop\\angula\\my-app\\src\\app\\shows\\shows.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { User } from '../userInterface';\nimport { ServiceService } from '../service.service';\n\n@Component({\n  selector: 'app-shows',\n  templateUrl: './shows.component.html',\n  styleUrls: ['./shows.component.css']\n})\nexport class ShowsComponent implements OnInit {\n  isSameUser = true;\n  editUser: User = {\n    id: -1,\n    name: '',\n    phone: '',\n    email: '',\n  };\n\n  constructor(public newServis: ServiceService) {}\n\n  ngOnInit(): void {}\n\n  edit(user: User, i: number) {\n    this.editUser = {\n      id: user.id,\n      name: user.name,\n      phone: user.phone,\n      email: user.email,\n    };\n\n    if (this.editUser.id === user.id) {\n      this.isSameUser = true;\n    }\n    this.isSameUser = false;\n\n    this.newServis.users[i].editMode = true;\n  }\n\n  save(user: User, i: number) {\n    if (!this.isValidEmail(user.email)) {\n      alert(\"Email is not valid\");\n      return;\n    }\n  \n    if (!this.isValidPhone(user.phone)) {\n      alert(\"Phone is not valid\");\n      return;\n    }\n  \n    if (user.name.trim() === '') {\n      alert(\"Name is required\");\n      return;\n    }\n  \n    const indexExist = this.newServis.users.findIndex((x) => x.id === user.id);\n    if (indexExist !== -1) {\n      this.newServis.users[indexExist] = this.editUser;\n      user.editMode = false;\n      this.isSameUser = true;\n    }\n  }\n  \n\n  cancel(user: User) {\n    user.editMode = false;\n    this.isSameUser = true;\n  }\n\n  delete(u: User, i: number) {\n    if (u.id === this.editUser.id) {\n      if (this.newServis.users[i] === u) {\n        this.newServis.users.splice(i, 1);\n        this.isSameUser = true;\n      }\n    }\n    console.log(i, this.newServis.users);\n  }\n\n  isValidEmail(email: string): boolean {\n    // Use a regular expression or other method to validate email\n    // For example, you can use Angular's built-in email validator\n    if(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/.test(email)){\n    return true\n    }\n    return false\n  }\n\n  isValidPhone(phone: string): boolean {\n    // Validate phone number using a regular expression or other method\n    // For example, you can use a pattern like /[0-9]{10}/ to validate a 10-digit phone number\n   if( /[0-9]{10}/.test(phone)){\n   return true\n  }\n  return false\n}\n\n\n\n\n\n\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}