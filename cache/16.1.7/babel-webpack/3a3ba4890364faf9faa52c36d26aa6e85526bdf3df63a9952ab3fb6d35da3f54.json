{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ShowsComponent = class ShowsComponent {\n  constructor(newServis) {\n    this.newServis = newServis;\n    this.isSameUser = true;\n    this.editUser = {\n      id: -1,\n      name: '',\n      phone: '',\n      email: ''\n    };\n    this.userInteractions = {};\n  }\n  ngOnInit() {}\n  edit(user, i) {\n    this.editUser = {\n      ...user\n    }; // Create a copy of the user to avoid modifying the original user object\n    this.isSameUser = this.editUser.id === user.id;\n    user.editMode = true;\n  }\n  save(user, i) {\n    if (this.isValidInput(this.editUser)) {\n      const indexExist = this.newServis.users.findIndex(x => x.id === user.id);\n      if (indexExist !== -1) {\n        this.newServis.users[indexExist] = this.editUser;\n        user.editMode = false;\n        this.isSameUser = true;\n        this.editUser = {\n          id: -1,\n          name: '',\n          phone: '',\n          email: ''\n        }; // Reset the editUser object\n      }\n    }\n  }\n\n  cancel(user) {\n    user.editMode = false;\n    this.isSameUser = true;\n    this.editUser = {\n      id: -1,\n      name: '',\n      phone: '',\n      email: ''\n    }; // Reset the editUser object\n  }\n\n  delete(u, i) {\n    if (u.id === this.editUser.id) {\n      if (this.newServis.users[i] === u) {\n        this.newServis.users.splice(i, 1);\n        this.isSameUser = true;\n      }\n    }\n  }\n  isValidInput(user) {\n    return this.isValidEmail(user.email) && this.isValidPhone(user.phone) && user.name.trim() !== '';\n  }\n  isValidEmail(email) {\n    return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/.test(email);\n  }\n  isValidPhone(phone) {\n    return /[0-9]{10}/.test(phone);\n  }\n  validateField(fieldName, index) {\n    this.userInteractions[fieldName + index] = true;\n  }\n  userHasInteracted(fieldName, index) {\n    return this.userInteractions[fieldName + index];\n  }\n};\nShowsComponent = __decorate([Component({\n  selector: 'app-shows',\n  templateUrl: './shows.component.html',\n  styleUrls: ['./shows.component.css']\n})], ShowsComponent);","map":{"version":3,"names":["Component","ShowsComponent","constructor","newServis","isSameUser","editUser","id","name","phone","email","userInteractions","ngOnInit","edit","user","i","editMode","save","isValidInput","indexExist","users","findIndex","x","cancel","delete","u","splice","isValidEmail","isValidPhone","trim","test","validateField","fieldName","index","userHasInteracted","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\mangesr\\Desktop\\angula\\my-app\\src\\app\\shows\\shows.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { User } from '../userInterface';\nimport { ServiceService } from '../service.service';\n\n@Component({\n  selector: 'app-shows',\n  templateUrl: './shows.component.html',\n  styleUrls: ['./shows.component.css']\n})\nexport class ShowsComponent implements OnInit {\n  isSameUser = true;\n  editUser: User = {\n    id: -1,\n    name: '',\n    phone: '',\n    email: '',\n  };\n\n  private userInteractions: { [key: string]: boolean } = {};\n\n  constructor(public newServis: ServiceService) {}\n\n  ngOnInit(): void {}\n\n  edit(user: User, i: number) {\n    this.editUser = { ...user }; // Create a copy of the user to avoid modifying the original user object\n    this.isSameUser = this.editUser.id === user.id;\n    user.editMode = true;\n  }\n  save(user: User, i: number) {\n    if (this.isValidInput(this.editUser)) {\n      const indexExist = this.newServis.users.findIndex((x) => x.id === user.id);\n      if (indexExist !== -1) {\n        this.newServis.users[indexExist] = this.editUser;\n        user.editMode = false;\n        this.isSameUser = true;\n        this.editUser = { id: -1, name: '', phone: '', email: '' }; // Reset the editUser object\n      }\n    }\n  }\n  \n  cancel(user: User) {\n    user.editMode = false;\n    this.isSameUser = true;\n    this.editUser = { id: -1, name: '', phone: '', email: '' }; // Reset the editUser object\n  }\n  \n  \n\n \n\n  delete(u: User, i: number) {\n    if (u.id === this.editUser.id) {\n      if (this.newServis.users[i] === u) {\n        this.newServis.users.splice(i, 1);\n        this.isSameUser = true;\n      }\n    }\n  }\n\n  isValidInput(user: User): boolean {\n    return this.isValidEmail(user.email) && this.isValidPhone(user.phone) && user.name.trim() !== '';\n  }\n\n  isValidEmail(email: string): boolean {\n    return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/.test(email);\n  }\n\n  isValidPhone(phone: string): boolean {\n    return /[0-9]{10}/.test(phone);\n  }\n\n  validateField(fieldName: string, index: number) {\n    this.userInteractions[fieldName + index] = true;\n  }\n\n  userHasInteracted(fieldName: string, index: number): boolean {\n    return this.userInteractions[fieldName + index];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}