{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ShowsComponent = class ShowsComponent {\n  constructor(newServis) {\n    this.newServis = newServis;\n    this.isSameUser = true;\n    this.editUser = {\n      id: -1,\n      name: '',\n      phone: '',\n      email: ''\n    };\n  }\n  ngOnInit() {}\n  edit(user, i) {\n    this.editUser = {\n      id: user.id,\n      name: user.name,\n      phone: user.phone,\n      email: user.email\n    };\n    if (this.editUser.id === user.id) {\n      this.isSameUser = true;\n    }\n    this.isSameUser = false;\n    this.newServis.users[i].editMode = true;\n  }\n  save(user, i) {\n    console.log(this.editUser);\n    const indexExist = this.newServis.users.findIndex(x => x.id === user.id);\n    if (indexExist !== -1) {\n      this.newServis.users.splice(indexExist, 1, this.editUser);\n      user.editMode = false;\n      this.isSameUser = true;\n      console.log(\"valid email? :\" + this.isValidEmail(this.editUser.email), \"valid phone? :\" + this.isValidPhone(this.editUser.phone));\n    }\n  }\n  cancel(user) {\n    user.editMode = false;\n    this.isSameUser = true;\n  }\n  delete(u, i) {\n    if (u.id === this.editUser.id) {\n      if (this.newServis.users[i] === u) {\n        this.newServis.users.splice(i, 1);\n        this.isSameUser = true;\n      }\n    }\n    console.log(i, this.newServis.users);\n  }\n  isValidEmail(email) {\n    // Use a regular expression or other method to validate email\n    // For example, you can use Angular's built-in email validator\n    return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/.test(email);\n  }\n  isValidPhone(phone) {\n    // Validate phone number using a regular expression or other method\n    // For example, you can use a pattern like /[0-9]{10}/ to validate a 10-digit phone number\n    return /[0-9]{10}/.test(phone);\n  }\n};\nShowsComponent = __decorate([Component({\n  selector: 'app-shows',\n  templateUrl: './shows.component.html',\n  styleUrls: ['./shows.component.css']\n})], ShowsComponent);","map":{"version":3,"names":["Component","ShowsComponent","constructor","newServis","isSameUser","editUser","id","name","phone","email","ngOnInit","edit","user","i","users","editMode","save","console","log","indexExist","findIndex","x","splice","isValidEmail","isValidPhone","cancel","delete","u","test","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\mangesr\\Desktop\\angula\\my-app\\src\\app\\shows\\shows.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { User } from '../userInterface';\nimport { ServiceService } from '../service.service';\n\n@Component({\n  selector: 'app-shows',\n  templateUrl: './shows.component.html',\n  styleUrls: ['./shows.component.css']\n})\nexport class ShowsComponent implements OnInit {\n  isSameUser = true;\n  editUser: User = {\n    id: -1,\n    name: '',\n    phone: '',\n    email: '',\n  };\n\n  constructor(public newServis: ServiceService) {}\n\n  ngOnInit(): void {}\n\n  edit(user: User, i: number) {\n    this.editUser = {\n      id: user.id,\n      name: user.name,\n      phone: user.phone,\n      email: user.email,\n    };\n\n    if (this.editUser.id === user.id) {\n      this.isSameUser = true;\n    }\n    this.isSameUser = false;\n\n    this.newServis.users[i].editMode = true;\n  }\n\n  save(user: User, i: number) {\n    console.log(this.editUser);\n      const indexExist = this.newServis.users.findIndex((x) => x.id === user.id);\n      if (indexExist !== -1) {\n        this.newServis.users.splice(indexExist, 1, this.editUser)\n        user.editMode = false;\n        this.isSameUser = true;\n        console.log(\"valid email? :\"+this.isValidEmail(this.editUser.email),\"valid phone? :\"+this.isValidPhone(this.editUser.phone))\n\n      }\n    \n  }\n\n  cancel(user: User) {\n    user.editMode = false;\n    this.isSameUser = true;\n  }\n\n  delete(u: User, i: number) {\n    if (u.id === this.editUser.id) {\n      if (this.newServis.users[i] === u) {\n        this.newServis.users.splice(i, 1);\n        this.isSameUser = true;\n      }\n    }\n    console.log(i, this.newServis.users);\n  }\n\n  isValidEmail(email: string): boolean {\n    // Use a regular expression or other method to validate email\n    // For example, you can use Angular's built-in email validator\n    return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/.test(email);\n  }\n\n  isValidPhone(phone: string): boolean {\n    // Validate phone number using a regular expression or other method\n    // For example, you can use a pattern like /[0-9]{10}/ to validate a 10-digit phone number\n    return /[0-9]{10}/.test(phone);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}