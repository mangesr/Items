{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ShowsComponent = class ShowsComponent {\n  constructor(newServis) {\n    this.newServis = newServis;\n    this.isSameUser = true;\n    this.editUser = {\n      id: -1,\n      name: '',\n      phone: '',\n      email: ''\n    };\n  }\n  ngOnInit() {}\n  edit(user, i) {\n    this.editUser = {\n      id: user.id,\n      name: user.name,\n      phone: user.phone,\n      email: user.email\n    };\n    if (this.editUser.id === user.id) {\n      this.isSameUser = true;\n    }\n    this.isSameUser = false;\n    this.newServis.users[i].editMode = true;\n  }\n  save(user, i) {\n    console.log(this.editUser);\n    const indexExist = this.newServis.users.findIndex(x => x.id === user.id);\n    if (indexExist !== -1) {\n      this.newServis.users.splice(indexExist, 1, this.editUser);\n      user.editMode = false;\n      this.isSameUser = true;\n    }\n  }\n  cancel(user) {\n    user.editMode = false;\n    this.isSameUser = true;\n  }\n  delete(u, i) {\n    if (u.id === this.editUser.id) {\n      if (this.newServis.users[i] === u) {\n        this.newServis.users.splice(i, 1);\n        this.isSameUser = true;\n      }\n    }\n    console.log(i, this.newServis.users);\n  }\n  MyCtrl($scope) {\n    $scope.this.newServis.users = [{\n      id: 1,\n      firstName: 'Ivan',\n      phone: 'Ivanov',\n      email: 'email@email.com'\n    }];\n    $scope.emailRegExp = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/;\n  }\n};\nShowsComponent = __decorate([Component({\n  selector: 'app-shows',\n  templateUrl: './shows.component.html',\n  styleUrls: ['./shows.component.css']\n})], ShowsComponent);","map":{"version":3,"names":["Component","ShowsComponent","constructor","newServis","isSameUser","editUser","id","name","phone","email","ngOnInit","edit","user","i","users","editMode","save","console","log","indexExist","findIndex","x","splice","cancel","delete","u","MyCtrl","$scope","this","firstName","emailRegExp","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\mangesr\\Desktop\\angula\\my-app\\src\\app\\shows\\shows.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { User } from '../userInterface';\nimport { ServiceService } from '../service.service';\n\n@Component({\n  selector: 'app-shows',\n  templateUrl: './shows.component.html',\n  styleUrls: ['./shows.component.css']\n})\nexport class ShowsComponent implements OnInit {\n  isSameUser = true;\n  editUser: User = {\n    id: -1,\n    name: '',\n    phone: '',\n    email: '',\n  };\n\n  constructor(public newServis: ServiceService) {}\n\n  ngOnInit(): void {}\n\n  edit(user: User, i: number) {\n    this.editUser = {\n      id: user.id,\n      name: user.name,\n      phone: user.phone,\n      email: user.email,\n    };\n\n    if (this.editUser.id === user.id) {\n      this.isSameUser = true;\n    }\n    this.isSameUser = false;\n\n    this.newServis.users[i].editMode = true;\n  }\n\n  save(user: User, i: number) {\n    console.log(this.editUser);\n      const indexExist = this.newServis.users.findIndex((x) => x.id === user.id);\n      if (indexExist !== -1) {\n        this.newServis.users.splice(indexExist, 1, this.editUser)\n        user.editMode = false;\n        this.isSameUser = true\n      } \n    \n  }\n\n  cancel(user: User) {\n    user.editMode = false;\n    this.isSameUser = true;\n  }\n\n  delete(u: User, i: number) {\n    if (u.id === this.editUser.id) {\n      if (this.newServis.users[i] === u) {\n        this.newServis.users.splice(i, 1);\n        this.isSameUser = true;\n      }\n    }\n    console.log(i, this.newServis.users);\n  }\n\n\n   MyCtrl($scope: { this: { newServis: { users: { id: number; firstName: string; phone: string; email: string; }[]; }; }; emailRegExp: RegExp; }) {\n    $scope.this.newServis.users = [\n        {\n            id: 1,\n            firstName: 'Ivan',\n            phone: 'Ivanov',\n            email: 'email@email.com'\n        }\n       \n    ];\n\n    $scope.emailRegExp = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/; \n}\n}"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAS1C,WAAMC,cAAc,GAApB,MAAMA,cAAc;EASzBC,YAAmBC,SAAyB;IAAzB,KAAAA,SAAS,GAATA,SAAS;IAR5B,KAAAC,UAAU,GAAG,IAAI;IACjB,KAAAC,QAAQ,GAAS;MACfC,EAAE,EAAE,CAAC,CAAC;MACNC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;KACR;EAE8C;EAE/CC,QAAQA,CAAA,GAAU;EAElBC,IAAIA,CAACC,IAAU,EAAEC,CAAS;IACxB,IAAI,CAACR,QAAQ,GAAG;MACdC,EAAE,EAAEM,IAAI,CAACN,EAAE;MACXC,IAAI,EAAEK,IAAI,CAACL,IAAI;MACfC,KAAK,EAAEI,IAAI,CAACJ,KAAK;MACjBC,KAAK,EAAEG,IAAI,CAACH;KACb;IAED,IAAI,IAAI,CAACJ,QAAQ,CAACC,EAAE,KAAKM,IAAI,CAACN,EAAE,EAAE;MAChC,IAAI,CAACF,UAAU,GAAG,IAAI;;IAExB,IAAI,CAACA,UAAU,GAAG,KAAK;IAEvB,IAAI,CAACD,SAAS,CAACW,KAAK,CAACD,CAAC,CAAC,CAACE,QAAQ,GAAG,IAAI;EACzC;EAEAC,IAAIA,CAACJ,IAAU,EAAEC,CAAS;IACxBI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACb,QAAQ,CAAC;IACxB,MAAMc,UAAU,GAAG,IAAI,CAAChB,SAAS,CAACW,KAAK,CAACM,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACf,EAAE,KAAKM,IAAI,CAACN,EAAE,CAAC;IAC1E,IAAIa,UAAU,KAAK,CAAC,CAAC,EAAE;MACrB,IAAI,CAAChB,SAAS,CAACW,KAAK,CAACQ,MAAM,CAACH,UAAU,EAAE,CAAC,EAAE,IAAI,CAACd,QAAQ,CAAC;MACzDO,IAAI,CAACG,QAAQ,GAAG,KAAK;MACrB,IAAI,CAACX,UAAU,GAAG,IAAI;;EAG5B;EAEAmB,MAAMA,CAACX,IAAU;IACfA,IAAI,CAACG,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACX,UAAU,GAAG,IAAI;EACxB;EAEAoB,MAAMA,CAACC,CAAO,EAAEZ,CAAS;IACvB,IAAIY,CAAC,CAACnB,EAAE,KAAK,IAAI,CAACD,QAAQ,CAACC,EAAE,EAAE;MAC7B,IAAI,IAAI,CAACH,SAAS,CAACW,KAAK,CAACD,CAAC,CAAC,KAAKY,CAAC,EAAE;QACjC,IAAI,CAACtB,SAAS,CAACW,KAAK,CAACQ,MAAM,CAACT,CAAC,EAAE,CAAC,CAAC;QACjC,IAAI,CAACT,UAAU,GAAG,IAAI;;;IAG1Ba,OAAO,CAACC,GAAG,CAACL,CAAC,EAAE,IAAI,CAACV,SAAS,CAACW,KAAK,CAAC;EACtC;EAGCY,MAAMA,CAACC,MAAsI;IAC5IA,MAAM,CAACC,IAAI,CAACzB,SAAS,CAACW,KAAK,GAAG,CAC1B;MACIR,EAAE,EAAE,CAAC;MACLuB,SAAS,EAAE,MAAM;MACjBrB,KAAK,EAAE,QAAQ;MACfC,KAAK,EAAE;KACV,CAEJ;IAEDkB,MAAM,CAACG,WAAW,GAAG,mDAAmD;EAC5E;CACC;AArEY7B,cAAc,GAAA8B,UAAA,EAL1B/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWjC,cAAc,CAqE1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}