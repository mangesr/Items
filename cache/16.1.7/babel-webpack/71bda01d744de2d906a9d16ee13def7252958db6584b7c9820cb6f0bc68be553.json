{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nexport let ShowsComponent = class ShowsComponent {\n  get QuestionsAndAnswers() {\n    return this.tableForm.get('QuestionsAndAnswers');\n  }\n  constructor(fb) {\n    this.fb = fb;\n    this.rowsCount = 3;\n  }\n  ngOnInit() {\n    this.tableForm = this.fb.group({\n      rows: this.fb.array([])\n    });\n    for (let i = 0; i < this.rowsCount; i++) {\n      this.QuestionsAndAnswers.push(this.fb.group({\n        Section: new FormControl(),\n        QuestionID: new FormControl(),\n        question: new FormControl(),\n        Answer_ShortTxt: new FormControl(),\n        Answer_LongTxt: new FormControl(),\n        FeedBack: new FormControl()\n      }));\n    }\n  }\n  ADDFeedback() {\n    console.log(this.tableForm.value);\n  }\n};\nShowsComponent = __decorate([Component({\n  selector: 'app-shows',\n  templateUrl: './shows.component.html',\n  styleUrls: ['./shows.component.css']\n})], ShowsComponent);","map":{"version":3,"names":["Component","FormControl","ShowsComponent","QuestionsAndAnswers","tableForm","get","constructor","fb","rowsCount","ngOnInit","group","rows","array","i","push","Section","QuestionID","question","Answer_ShortTxt","Answer_LongTxt","FeedBack","ADDFeedback","console","log","value","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\mangesr\\Desktop\\angula\\my-app\\src\\app\\shows\\shows.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { User } from '../userInterface';\nimport { ServiceService } from '../service.service';\nimport { FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-shows',\n  templateUrl: './shows.component.html',\n  styleUrls: ['./shows.component.css']\n})\nexport class ShowsComponent implements OnInit {\n//   isSameUser = true;\n//   editUser: User = {\n//     id: -1,\n//     name: '',\n//     phone: '',\n//     email: '',\n//   };\n\n//   constructor(public newServis: ServiceService) {}\n\n//   ngOnInit(): void {}\n\n//   edit(user: User, i: number) {\n//     this.editUser = {\n//       id: user.id,\n//       name: user.name,\n//       phone: user.phone,\n//       email: user.email,\n//     };\n\n//     if (this.editUser.id === user.id) {\n//       this.isSameUser = true;\n//     }\n//     this.isSameUser = false;\n\n//     this.newServis.users[i].editMode = true;\n//   }\n\n//   save(user: User, i: number) {\n//     if (!this.isValidEmail(user.email)) {\n//       alert(\"Email is not valid\");\n//       return;\n//     }\n  \n//     if (!this.isValidPhone(user.phone)) {\n//       alert(\"Phone is not valid\");\n//       return;\n//     }\n  \n//     if (user.name.trim() === '') {\n//       alert(\"Name is required\");\n//       return;\n//     }\n  \n//     const indexExist = this.newServis.users.findIndex((x) => x.id === user.id);\n//     if (indexExist !== -1) {\n//       this.newServis.users[indexExist] = this.editUser;\n//       user.editMode = false;\n//       this.isSameUser = true;\n//     }\n//   }\n  \n\n//   cancel(user: User) {\n//     user.editMode = false;\n//     this.isSameUser = true;\n//   }\n\n//   delete(u: User, i: number) {\n//     if (u.id === this.editUser.id) {\n//       if (this.newServis.users[i] === u) {\n//         this.newServis.users.splice(i, 1);\n//         this.isSameUser = true;\n//       }\n//     }\n//     console.log(i, this.newServis.users);\n//   }\n\n//   isValidEmail(email: string): boolean {\n//     // Use a regular expression or other method to validate email\n//     // For example, you can use Angular's built-in email validator\n//     if(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/.test(email)){\n//     return true\n//     }\n//     return false\n//   }\n\n//   isValidPhone(phone: string): boolean {\n//     // Validate phone number using a regular expression or other method\n//     // For example, you can use a pattern like /[0-9]{10}/ to validate a 10-digit phone number\n//    if( /[0-9]{10}/.test(phone)){\n//    return true\n//   }\n//   return false\n// }\n\n\ntableForm!: FormGroup;\n\nrowsCount: number = 3;\nget QuestionsAndAnswers() {\n  return this.tableForm.get('QuestionsAndAnswers') as FormArray;\n}\n\nconstructor(private fb: FormBuilder) {}\n\nngOnInit() {\n  this.tableForm = this.fb.group({\n    rows: this.fb.array([]),\n  });\n\n  for (let i = 0; i < this.rowsCount; i++) {\n    this.QuestionsAndAnswers.push(\n      this.fb.group({\n        Section: new FormControl(),\n        QuestionID: new FormControl(),\n        question: new FormControl(),\n        Answer_ShortTxt: new FormControl(),\n        Answer_LongTxt: new FormControl(),\n        FeedBack: new FormControl(),\n      })\n    );\n  }\n}\n\nADDFeedback() {\n  console.log(this.tableForm.value);\n}\n}\n\n\n\n}"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAGjD,SAAiCC,WAAW,QAAmB,gBAAgB;AAOxE,WAAMC,cAAc,GAApB,MAAMA,cAAc;EA2F3B,IAAIC,mBAAmBA,CAAA;IACrB,OAAO,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,qBAAqB,CAAc;EAC/D;EAEAC,YAAoBC,EAAe;IAAf,KAAAA,EAAE,GAAFA,EAAE;IALtB,KAAAC,SAAS,GAAW,CAAC;EAKiB;EAEtCC,QAAQA,CAAA;IACN,IAAI,CAACL,SAAS,GAAG,IAAI,CAACG,EAAE,CAACG,KAAK,CAAC;MAC7BC,IAAI,EAAE,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC,EAAE;KACvB,CAAC;IAEF,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACL,SAAS,EAAEK,CAAC,EAAE,EAAE;MACvC,IAAI,CAACV,mBAAmB,CAACW,IAAI,CAC3B,IAAI,CAACP,EAAE,CAACG,KAAK,CAAC;QACZK,OAAO,EAAE,IAAId,WAAW,EAAE;QAC1Be,UAAU,EAAE,IAAIf,WAAW,EAAE;QAC7BgB,QAAQ,EAAE,IAAIhB,WAAW,EAAE;QAC3BiB,eAAe,EAAE,IAAIjB,WAAW,EAAE;QAClCkB,cAAc,EAAE,IAAIlB,WAAW,EAAE;QACjCmB,QAAQ,EAAE,IAAInB,WAAW;OAC1B,CAAC,CACH;;EAEL;EAEAoB,WAAWA,CAAA;IACTC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACnB,SAAS,CAACoB,KAAK,CAAC;EACnC;CACC;AAvHYtB,cAAc,GAAAuB,UAAA,EAL1BzB,SAAS,CAAC;EACT0B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACW1B,cAAc,CAuH1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}