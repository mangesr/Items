{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ShowsComponent = class ShowsComponent {\n  constructor(newServis) {\n    this.newServis = newServis;\n    this.isSameUser = true;\n    this.editUser = {\n      id: -1,\n      name: \"\",\n      phone: \"\",\n      email: \"\"\n    };\n  }\n  ngOnInit() {}\n  edit(user, i) {\n    this.editUser = {\n      id: user.id,\n      name: user.name,\n      phone: user.phone,\n      email: user.email\n    };\n    if (this.editUser.id === user.id) {\n      this.isSameUser = true;\n    }\n    this.isSameUser = false;\n    this.newServis.users[i].editMode = true;\n  }\n  save(user, i) {\n    console.log(user, this.editUser);\n    // Perform email and phone validations here\n    if (this.isValidEmail(this.editUser.email) && this.isValidPhone(this.editUser.phone)) {\n      const indexExist = this.newServis.users.findIndex(x => x.id === user.id);\n      if (indexExist !== -1) {\n        this.newServis.users.splice(indexExist, 1, this.editUser);\n        user.editMode = false;\n        this.isSameUser = true;\n      }\n    }\n  }\n  cancel(user) {\n    user.editMode = false;\n    this.isSameUser = true;\n  }\n  delete(u, i) {\n    if (u.id === this.editUser.id) {\n      if (this.newServis.users[i] === u) {\n        this.newServis.users.splice(i, 1);\n        this.isSameUser = true;\n      }\n    }\n    console.log(i, this.newServis.users);\n  }\n  isValidEmail(email) {\n    // Use a regular expression or other method to validate email\n    // For example, you can use Angular's built-in email validator\n    return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/.test(email);\n  }\n  isValidPhone(phone) {\n    // Validate phone number using a regular expression or other method\n    // For example, you can use a pattern like /[0-9]{10}/ to validate a 10-digit phone number\n    return /[0-9]{10}/.test(phone);\n  }\n};\nShowsComponent = __decorate([Component({\n  selector: 'app-shows',\n  templateUrl: './shows.component.html',\n  styleUrls: ['./shows.component.css']\n})], ShowsComponent);","map":{"version":3,"names":["Component","ShowsComponent","constructor","newServis","isSameUser","editUser","id","name","phone","email","ngOnInit","edit","user","i","users","editMode","save","console","log","isValidEmail","isValidPhone","indexExist","findIndex","x","splice","cancel","delete","u","test","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\mangesr\\Desktop\\angula\\my-app\\src\\app\\shows\\shows.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport { User } from '../userInterface';\nimport { ServiceService } from '../service.service';\n\n\n\n@Component({\n  selector: 'app-shows',\n  templateUrl: './shows.component.html',\n  styleUrls: ['./shows.component.css']\n})\nexport class ShowsComponent implements OnInit{\n\n  isSameUser=true\n  editUser: User ={\n    id:-1,\n    name:\"\",\n    phone:\"\",\n    email :\"\",\n  }\n\n  constructor(public newServis:ServiceService){}\n  \n\n  ngOnInit(): void {\n  }\n\n  edit(user:User,i:number){\n  \n    this.editUser = {\n      id:user.id,\n      name:user.name,\n      phone:user.phone,\n      email:user.email,\n    \n  }\n    if(this.editUser.id===user.id){\n      this.isSameUser=true\n     }\n     this.isSameUser=false\n\n\n    this.newServis.users[i].editMode=true;\n   \n\n  }\n  save(user: User, i: number) {\n    console.log(user, this.editUser);\n\n    // Perform email and phone validations here\n    if (this.isValidEmail(this.editUser.email) && this.isValidPhone(this.editUser.phone)) {\n      const indexExist = this.newServis.users.findIndex((x) => x.id === user.id);\n      if (indexExist !== -1) {\n        this.newServis.users.splice(indexExist, 1, this.editUser);\n        user.editMode = false;\n        this.isSameUser = true;\n      }\n    }\n  }\n\n  cancel(user: User) {\n    user.editMode = false;\n    this.isSameUser = true;\n  }\n\n  delete(u: User, i: number) {\n    if (u.id === this.editUser.id) {\n      if (this.newServis.users[i] === u) {\n        this.newServis.users.splice(i, 1);\n        this.isSameUser = true;\n      }\n    }\n    console.log(i, this.newServis.users);\n  }\n\n  isValidEmail(email: string): boolean {\n    // Use a regular expression or other method to validate email\n    // For example, you can use Angular's built-in email validator\n    return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/.test(email);\n  }\n\n  isValidPhone(phone: string): boolean {\n    // Validate phone number using a regular expression or other method\n    // For example, you can use a pattern like /[0-9]{10}/ to validate a 10-digit phone number\n    return /[0-9]{10}/.test(phone);\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAA4C,eAAe;AAWtE,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAUzBC,YAAmBC,SAAwB;IAAxB,KAAAA,SAAS,GAATA,SAAS;IAR5B,KAAAC,UAAU,GAAC,IAAI;IACf,KAAAC,QAAQ,GAAQ;MACdC,EAAE,EAAC,CAAC,CAAC;MACLC,IAAI,EAAC,EAAE;MACPC,KAAK,EAAC,EAAE;MACRC,KAAK,EAAE;KACR;EAE4C;EAG7CC,QAAQA,CAAA,GACR;EAEAC,IAAIA,CAACC,IAAS,EAACC,CAAQ;IAErB,IAAI,CAACR,QAAQ,GAAG;MACdC,EAAE,EAACM,IAAI,CAACN,EAAE;MACVC,IAAI,EAACK,IAAI,CAACL,IAAI;MACdC,KAAK,EAACI,IAAI,CAACJ,KAAK;MAChBC,KAAK,EAACG,IAAI,CAACH;KAEd;IACC,IAAG,IAAI,CAACJ,QAAQ,CAACC,EAAE,KAAGM,IAAI,CAACN,EAAE,EAAC;MAC5B,IAAI,CAACF,UAAU,GAAC,IAAI;;IAErB,IAAI,CAACA,UAAU,GAAC,KAAK;IAGtB,IAAI,CAACD,SAAS,CAACW,KAAK,CAACD,CAAC,CAAC,CAACE,QAAQ,GAAC,IAAI;EAGvC;EACAC,IAAIA,CAACJ,IAAU,EAAEC,CAAS;IACxBI,OAAO,CAACC,GAAG,CAACN,IAAI,EAAE,IAAI,CAACP,QAAQ,CAAC;IAEhC;IACA,IAAI,IAAI,CAACc,YAAY,CAAC,IAAI,CAACd,QAAQ,CAACI,KAAK,CAAC,IAAI,IAAI,CAACW,YAAY,CAAC,IAAI,CAACf,QAAQ,CAACG,KAAK,CAAC,EAAE;MACpF,MAAMa,UAAU,GAAG,IAAI,CAAClB,SAAS,CAACW,KAAK,CAACQ,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACjB,EAAE,KAAKM,IAAI,CAACN,EAAE,CAAC;MAC1E,IAAIe,UAAU,KAAK,CAAC,CAAC,EAAE;QACrB,IAAI,CAAClB,SAAS,CAACW,KAAK,CAACU,MAAM,CAACH,UAAU,EAAE,CAAC,EAAE,IAAI,CAAChB,QAAQ,CAAC;QACzDO,IAAI,CAACG,QAAQ,GAAG,KAAK;QACrB,IAAI,CAACX,UAAU,GAAG,IAAI;;;EAG5B;EAEAqB,MAAMA,CAACb,IAAU;IACfA,IAAI,CAACG,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACX,UAAU,GAAG,IAAI;EACxB;EAEAsB,MAAMA,CAACC,CAAO,EAAEd,CAAS;IACvB,IAAIc,CAAC,CAACrB,EAAE,KAAK,IAAI,CAACD,QAAQ,CAACC,EAAE,EAAE;MAC7B,IAAI,IAAI,CAACH,SAAS,CAACW,KAAK,CAACD,CAAC,CAAC,KAAKc,CAAC,EAAE;QACjC,IAAI,CAACxB,SAAS,CAACW,KAAK,CAACU,MAAM,CAACX,CAAC,EAAE,CAAC,CAAC;QACjC,IAAI,CAACT,UAAU,GAAG,IAAI;;;IAG1Ba,OAAO,CAACC,GAAG,CAACL,CAAC,EAAE,IAAI,CAACV,SAAS,CAACW,KAAK,CAAC;EACtC;EAEAK,YAAYA,CAACV,KAAa;IACxB;IACA;IACA,OAAO,mDAAmD,CAACmB,IAAI,CAACnB,KAAK,CAAC;EACxE;EAEAW,YAAYA,CAACZ,KAAa;IACxB;IACA;IACA,OAAO,WAAW,CAACoB,IAAI,CAACpB,KAAK,CAAC;EAChC;CACD;AA3EYP,cAAc,GAAA4B,UAAA,EAL1B7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACW/B,cAAc,CA2E1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}